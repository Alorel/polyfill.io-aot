import {PolyfillConfigBase} from '@polyfill-io-aot/common';
import {Options as ZopfliOptions} from 'node-zopfli';

import {Omit} from './Omit';
import {PackageManager} from './PackageManager';
import {UAGeneratorFunction} from './UAGeneratorFunction';

export interface UserAgentGenerators {
  android: UAGeneratorFunction;
  blackberry: UAGeneratorFunction;
  chrome: UAGeneratorFunction;
  firefox: UAGeneratorFunction;
  firefoxMobile: UAGeneratorFunction;
  ie: UAGeneratorFunction;
  ieMobile: UAGeneratorFunction;
  iosSafari: UAGeneratorFunction;
  opera: UAGeneratorFunction;
  operaMobile: UAGeneratorFunction;
  safari: UAGeneratorFunction;
  samsung: UAGeneratorFunction;
}

export interface PolyfillBuilderConfig extends PolyfillConfigBase {
  /**
   * Additional directories containing your own polyfills in the polyfill-service format.
   * @see https://github.com/Financial-Times/polyfill-service/tree/v3.25.1/polyfills
   * @see https://polyfill.io/v2/docs/contributing/authoring-polyfills
   * @default []
   */
  dirs: string[];
  /**
   * The package manager to use when spawning processes.
   * @default npm
   */
  packageManager: PackageManager;
  /**
   * Number of processes to spawn for compression and polyfill bundle generation
   * @default Math.max(1, NUM_CPU_CORES - 1)
   */
  processes: number;
  /**
   * Spoof user agent generators. Every user agent generated by these will be used to generate
   * a set of polyfills and every unique set of polyfills will be persisted for use in production.
   */
  uaGenerators: UserAgentGenerators;
  /**
   * Options to pass to node-zopfli
   * @default {blocksplitting: true, numiterations: 15}
   */
  zopfli: ZopfliOptions;
}

export type PartialPolyfillBuilderConfig = Partial<Omit<PolyfillBuilderConfig, 'uaGenerators'>> & {
  uaGenerators?: Partial<UserAgentGenerators>;
};
